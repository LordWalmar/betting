// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var drawingBarChart, responsiveChart;
    drawingBarChart = function(data) {
      var cause, causes, createGradient, h, handlePrice, p, price_format, rect, rule, svg, w, wrap, x, xAxis, y, z;
      handlePrice = function(price) {
        var i, text, textArray;
        i = void 0;
        text = void 0;
        textArray = void 0;
        textArray = [];
        text = price.toString();
        i = text.length - 1;
        while (i >= 0) {
          textArray.push(text[i]);
          i--;
        }
        if (textArray.length > 3) {
          textArray.splice(3, 0, " ");
          textArray.splice(7, 0, " ");
          textArray.splice(11, 0, " ");
          textArray.reverse();
          text = textArray.toString();
          text = text.replace(/\,/g, "").trim();
        }
        return text + " руб.";
      };
      price_format = function(price_num) {
        var rgx, text, x, x1;
        x = (price_num + "").split(".");
        x1 = x[0];
        rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
          x1 = x1.replace(rgx, "$1 $2");
        }
        return text = x1 + " руб.";
      };
      wrap = function(text, width) {
        text.each(function(el) {
          var dy, line, lineHeight, lineNumber, tspan, word, words, y;
          text = d3.select(this);
          words = data.dataObj[el].name.split(/\s+/).reverse();
          word = void 0;
          line = [];
          lineNumber = 0;
          lineHeight = 1;
          y = text.attr("y");
          dy = parseFloat(text.attr("dy"));
          tspan = text.text(null).append("tspan").attr("x", 0).attr("y", 6).attr("dy", ".71em").attr("font-size", "14px");
          while (word = words.pop()) {
            line.push(word);
            tspan.text(line.join(" "));
            if (tspan.node().getComputedTextLength() > width) {
              line.pop();
              tspan.text(line.join(" "));
              line = [word];
              tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").attr("font-size", "14px").text(word);
            }
          }
        });
      };
      w = 795;
      h = 395;
      p = [20, 0, 20, 20];
      x = d3.scale.ordinal().rangeRoundBands([0, w - p[1] - p[3] - 85]);
      y = d3.scale.linear().range([0, h - p[0] - p[2]]);
      svg = d3.select(".chart-canvas__bar").append("svg:svg").attr("class", "svg-chart_bar").attr("viewBox", "0 0 795 404").attr("perserveAspectRatio", "xMinYMid").attr("width", w).attr("height", h);
      causes = d3.layout.stack()(["total", "economy"].map(function(cause) {
        return data.dataObj.map(function(d, el) {
          if (cause === 'total') {
            return {
              x: el,
              y: +d['economy']
            };
          } else {
            return {
              x: el,
              y: +(d['total'] - d['economy'])
            };
          }
        });
      }));
      x.domain(causes[0].map(function(d) {
        return d.x;
      }));
      y.domain([
        0, d3.max(causes[causes.length - 1], function(d) {
          return d.y0 + d.y;
        })
      ]);
      rule = svg.append("svg:g").selectAll("g.rule").data(y.ticks(5)).enter().append("svg:g").attr("class", "rule").attr("transform", function(d) {
        return "translate(0," + (h - p[2] - 20 - y(d)) + ")";
      });
      rule.append("svg:line").attr("x1", 90).attr("x2", w - p[1] - p[3]).style("stroke", function(d) {
        if (d) {
          return "#ccc";
        } else {
          return "#9099A4";
        }
      }).style("stroke-opacity", function(d) {
        if (d) {
          return .7;
        } else {
          return null;
        }
      });
      rule.append("svg:text").attr("x", 0).attr("y", 10).attr("dy", ".35em").attr("font-size", "14px").attr("font-family", "\"PlumbMedium\"").text(function(d) {
        return handlePrice(d);
      });
      createGradient = function(i, x1, x2) {
        var gradient;
        gradient = svg.append("linearGradient").attr("x1", x1).attr("y1", "50%").attr("x2", x2).attr("y2", "50%").attr("id", "gradient" + i).attr("gradientUnits", "userSpaceOnUse");
        gradient.append("stop").attr("offset", "0").attr("stop-color", "#EF0D41").attr("stop-opacity", 1);
        gradient.append("stop").attr("offset", "0.5").attr("stop-color", "#BE0E37").attr("stop-opacity", 1);
      };
      z = d3.scale.ordinal().range(["url(#gradient)", "#C6A67A"]);
      cause = svg.selectAll("g.cause").data(causes).enter().append("svg:g").attr("class", "cause").style("fill", function(d, i) {
        if (i === 0) {
          return "url(#gradient0)";
        } else {
          return "#C6A67A";
        }
      }).style("stroke", "#fff").attr("transform", function(d) {
        return "translate(85,0)";
      });
      rect = cause.selectAll("rect").data(Object).enter().append("svg:rect").attr("x", function(d) {
        return x(d.x) + 30;
      }).attr("y", function(d) {
        return (h - p[2] - 20) - y(d.y0);
      }).attr("height", function(d) {
        return y(d.y0);
      }).attr("width", 140).style("fill", function(d, i) {
        createGradient(i, x(d.x) + 30, x(d.x) + 30 + 140);
        if (d.y0 === 0) {
          return "url(#gradient" + i + ")";
        } else {
          return "#C6A67A";
        }
      });
      rect.transition().delay(function(d) {
        if (!d.y0 === 0) {
          return 250;
        } else {
          return 0;
        }
      }).duration(function(d) {
        if (!d.y0 === 0) {
          return 450;
        } else {
          return 400;
        }
      }).attr("y", function(d) {
        return (h - p[2] - 20) - (y(d.y0) + y(d.y));
      }).attr("height", function(d) {
        return y(d.y);
      });
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      svg.append("g").attr("transform", "translate(" + 95 + "," + (h - p[2] - 20) + ")").attr("class", "x axis").call(xAxis).selectAll("text").attr("text-anchor", "left").data(x.domain()).call(wrap, x.rangeBand());
      rect.on("mouseover", function(innerValue, i) {
        var coordinateTooltip, k, leftTooltip, paragraphTooltip, tooltip, widthTooltip, widthWindow;
        coordinateTooltip = void 0;
        tooltip = void 0;
        widthTooltip = void 0;
        widthWindow = void 0;
        $(this).css("cursor", "pointer");
        widthTooltip = $(this).closest(".statistics-barChart_item").find("chart-tooltip_wrap").outerWidth();
        coordinateTooltip = d3.event.pageX;
        tooltip = $(".statistics-barChart_item .chart-tooltip_wrap");
        widthWindow = $(window).outerWidth();
        if (widthWindow <= 1280) {
          if (widthWindow <= 870) {
            k = widthWindow / 870;
          } else {
            k = widthWindow / 1280;
          }
        } else {
          k = 1;
        }
        leftTooltip = $(this).offset().left - tooltip.width() / 2 + (+this.getAttribute("width")) * k / 2;
        tooltip.css("left", leftTooltip + "px");
        paragraphTooltip = tooltip.css("top", d3.event.pageY - 65 + "px").css("display", "block").find("p");
        if (innerValue.y0 === 0) {
          paragraphTooltip.text(price_format(data.dataObj[i].economy));
        } else {
          paragraphTooltip.text(price_format(data.dataObj[i].total - data.dataObj[i].economy));
        }
      }).on("mouseout", function() {
        return d3.select(".statistics-barChart_item .chart-tooltip_wrap").style("display", "none");
      });
      return;
    };
    responsiveChart = function() {
      var aspect, chart, container;
      aspect = void 0;
      chart = void 0;
      container = void 0;
      chart = $(".svg-chart_bar");
      aspect = chart.width() / chart.height();
      container = $(".chart-canvas__bar");
      $(window).on("resize", function() {
        var targetWidth;
        targetWidth = void 0;
        targetWidth = container.width();
        chart.attr("width", targetWidth);
        chart.attr("height", Math.round(targetWidth / aspect));
      }).trigger("resize");
    };
    return window.initChartBar = function(data) {
      drawingBarChart(data);
      responsiveChart();
    };
  });

}).call(this);
