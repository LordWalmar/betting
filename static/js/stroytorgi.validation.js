// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var $currentForm, $wbtRadioBtn, formPointNone, handlerInvalid, handlerValid, handlerValidSendAjax, handlerValidSubscribe, submitButton_styled;
    submitButton_styled = function($form, disable) {
      var $submit_btn, color;
      $submit_btn = $form.find('button[type=submit], input[type=submit]');
      color = $submit_btn.attr('data-color') ? $submit_btn.attr('data-color') : ($submit_btn.hasClass('btn-submit__red') ? 'red' : 'grey');
      $submit_btn.attr('data-color', color);
      $submit_btn.toggleClass("btn-submit__" + color, !disable);
      $submit_btn.toggleClass("btn-loading", disable);
      $submit_btn.toggleClass("btn-loading__" + color, disable);
      return $submit_btn.prop('disabled', disable);
    };
    $.validator.addMethod("is_phone", (function(value, element, param) {
      var phone;
      phone = value.match(/^\+?(\d|-|\(|\)|\s|\.)+$/g);
      return this.optional(element) || phone;
    }), "Пожалуйста, вводите только цифры и символы (, ), -, +.");
    $.validator.addMethod("is_email", (function(value, element, param) {
      var email;
      email = value.match(/^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/);
      return this.optional(element) || email;
    }), "Введите корректный Email.");
    $.validator.addMethod("is_name", (function(value, element, param) {
      var name;
      name = value.match(/^[а-яёa-z ]+$/gi);
      return this.optional(element) || name;
    }), "Ф.И.О. не должно содержать цифры.");
    $.validator.addMethod("is_author", (function(value, element, param) {
      var author;
      author = value.match(/^[а-яёa-z ]+$/gi);
      return this.optional(element) || author;
    }), "Ф.И.О. не должно содержать цифры.");

    /*
    $.validator.addMethod "is_validateLength", ((value, element, param) ->
      word_length = value.length
      $this = $(element)
      definitionMaxLength =  ->
        $radioBtn = $('.wbt-input-radio__active').find('input')
        $numberFace = $radioBtn.val()
        if +$numberFace == 0
          $this.attr('maxlength', '10')
          return 10
        else
          $this.attr('maxlength', '12')
          return 12
      this.optional(element) || word_length <= definitionMaxLength()
      ), "Максимальное количество символов " + $('.input-text[name="inn"]').attr('maxlength') + "."
     */
    $('input[name="individ"]').on('change', function() {
      var $inputCurrent, $numberFace, $radioBtn, countSigns;
      $radioBtn = $('.wbt-input-radio__active').find('input');
      $numberFace = $radioBtn.val();
      $inputCurrent = $('input[name="inn"]');
      if (+$numberFace === 0) {
        countSigns = 10;
      } else {
        countSigns = 12;
      }
      $inputCurrent.rules("remove", "maxlength");
      return $inputCurrent.rules("add", {
        maxlength: countSigns,
        messages: {
          maxlength: "Максимальное количество символов " + countSigns + "."
        }
      });
    });
    $.validator.addMethod("is_number", (function(value, element, param) {
      var phone;
      phone = value.match(/^(\d)+$/g);
      return this.optional(element) || phone;
    }), "Пожалуйста, вводите только цифры.");
    $.validator.setDefaults({
      errorClass: 'stroytorgi-error'
    });
    formPointNone = function($elem, radioChoise) {
      $elem.rules("remove", "required");
      $elem.rules("add", {
        required: radioChoise
      });
      if (radioChoise) {
        return $elem.closest('label').css('width', '100%').slideDown('fast');
      } else {
        return $elem.closest('label').css('width', '100%').slideUp('fast');
      }
    };
    $wbtRadioBtn = $('.registration-info_choise').find('input[type="radio"]');
    $currentForm = $wbtRadioBtn.closest('form');
    $wbtRadioBtn.on("click", function() {
      var $kpp, $org_type, radioChoise;
      $kpp = $('input[name="kpp"]');
      $org_type = $('select[name="org_type"]');
      radioChoise = $(this).val() !== '1';
      formPointNone($kpp, radioChoise);
      return formPointNone($org_type, radioChoise);
    });
    handlerInvalid = function(form, validator) {
      var btn;
      $(this).addClass('form_invalid');
      btn = $(this).find(".btn-submit");
      btn.removeClass("btn-loading");
      return btn.removeAttr('disabled');
    };
    handlerValid = function(form, validator) {
      $(form).removeClass('form_invalid');
      $(form).find('.other_errors').hide();
      return form.submit();
    };
    handlerValidSubscribe = function(form, validator) {
      var $form;
      $form = $(form);
      return $.post('/blog/subscribe.json', $form.serialize(), function(data) {
        var error, error_msg;
        if (data.success) {
          $form.removeClass('form_invalid');
          $form.find('.stroytorgi-error').hide();
          $form.find('.blog-updates_confirm').show();
          return $form[0].reset();
        } else {
          error = data.message['email'];
          error_msg = error;
          if (!(typeof error === "string" || error instanceof String)) {
            $.each(error, function(error_key) {
              return error_msg = this;
            });
          }
          return $form.find('.stroytorgi-error').text(error_msg).show();
        }
      }, 'json').fail(function() {
        return $form.find('.stroytorgi-error').text('Возникла ошибка. Попробуйте позже.').show();
      });
    };
    handlerValidSendAjax = function(form, validator) {
      var $file, $form, ajax_params, category_slug, data_f, file_data, show_custom_errors, url;
      $form = $(form);
      $form.attr('data-process', '1');
      submitButton_styled($form, true);
      show_custom_errors = function(errors) {
        var $other_errors;
        $other_errors = $form.find('.other_errors');
        $other_errors.empty();
        $.each(errors, function(name) {
          var $label, error, label;
          $label = $form.find("[name=" + name + "]").closest('label').find('.form_point');
          label = ($label.length ? '<span>' + $label.text() + ':</span> ' : '');
          error = this;
          if (!(typeof this === "string" || this instanceof String)) {
            $.each(this, function(error_key) {
              return error = this;
            });
          }
          return $other_errors.append("<p class='stroytorgi-error'>" + label + error + "</p>");
        });
        return $other_errors.show();
      };
      $form.removeClass('form_invalid');
      $form.find('.other_errors').hide();
      if (['form_request', 'form_question'].indexOf($form.attr('id')) > -1) {
        category_slug = $form.find('select[name=category_id]').find('option:selected').attr('data-slug');
        $form.attr('data-url', "http://master-promo.test.stroytorgi.ru/faq/" + category_slug + "/question.json");
      }
      url = $form.attr('data-url') ? $form.attr('data-url') : $form.attr('action');
      ajax_params = {
        type: 'POST',
        async: false,
        dataType: 'json',
        url: url,
        data: $form.serialize(),
        success: function(response) {
          var $thnx, redirect_url;
          if (response.success) {
            redirect_url = $form.attr('data-redirect');
            if (redirect_url) {
              return location.href = '/';
            } else {
              $form[0].reset();
              $thnx = $form.closest('.form_wrapper').find('.thnx');
              if ($thnx.length) {
                $form.closest('.form_container').hide();
                return $thnx.show();
              } else {
                return alert('Спасибо. ' + (response.message || ''));
              }
            }
          } else {
            return show_custom_errors(response.errors || response.message);
          }
        },
        error: function(xhr, status_text, err) {
          return show_custom_errors({
            nonfielderror: (xhr.status === 413 ? 'Прикрепленный файл слишком большой.' : 'Возникла ошибка. Попробуйте позже')
          });
        }
      };
      $file = $form.find('[type=file]');
      if ($file.length && $file.data().files) {
        file_data = $file.data().files[0];
        data_f = new FormData();
        $.each($form.find('input, select'), function() {
          return data_f.append(this.name, this.value);
        });
        data_f.append('file', file_data);
        data_f.append('text', $form.find('[name=text]').val());
        ajax_params["data"] = data_f;
        ajax_params["mimeType"] = "multipart/form-data";
        ajax_params["contentType"] = false;
        ajax_params["cache"] = false;
        ajax_params["processData"] = false;
      }
      $.ajax(ajax_params);
      submitButton_styled($form, false);
      return false;
    };
    $("#form-signin_login").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValid,
      rules: {
        login: {
          required: true
        },
        password: {
          required: true
        }
      },
      messages: {
        login: {
          required: "Логин обязателен для заполнения."
        },
        password: {
          required: "Пароль обязателен для заполнения."
        }
      }
    });
    $("#form-signin_ep").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValid,
      rules: {
        pin: {
          required: true
        }
      },
      messages: {
        pin: {
          required: "PIN обязателен для заполнения."
        }
      }
    });
    $("#form-signin_nopassword").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValid,
      rules: {
        nopassword: {
          required: true
        }
      },
      messages: {
        nopassword: {
          required: "Логин обязателен для заполнения."
        }
      }
    });
    $("#form_presentation").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValidSendAjax,
      rules: {
        name: {
          required: true,
          is_name: true
        },
        company_name: {
          required: true
        },
        phone: {
          required: true,
          is_phone: true
        },
        email: {
          required: true,
          is_email: true
        }
      },
      messages: {
        name: {
          required: "Ф.И.О. обязательно для заполнения."
        },
        company_name: {
          required: "Имя компании обязательно для заполнения."
        },
        phone: {
          required: "Телефон обязателен для заполнения."
        },
        email: {
          required: "Email обязателен для заполнения.",
          email: "Введите корректный Email."
        }
      }
    });
    $("#form_seminar").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValidSendAjax,
      rules: {
        name: {
          required: true,
          is_name: true
        },
        company_name: {
          required: true
        },
        phone: {
          required: true,
          is_phone: true
        },
        email: {
          required: true,
          is_email: true
        }
      },
      messages: {
        name: {
          required: "Ф.И.О. обязательно для заполнения."
        },
        company_name: {
          required: "Имя компании обязательно для заполнения."
        },
        phone: {
          required: "Телефон обязателен для заполнения."
        },
        email: {
          required: "Email обязателен для заполнения.",
          email: "Введите корректный Email."
        }
      }
    });
    $("#form_question").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValidSendAjax,
      rules: {
        author: {
          required: true,
          is_author: true
        },
        email: {
          required: true,
          is_email: true
        },
        text: {
          required: true
        }
      },
      messages: {
        author: {
          required: "Ф.И.О. обязательно для заполнения."
        },
        email: {
          required: "Email обязателен для заполнения.",
          email: "Введите корректный Email."
        },
        text: {
          required: "Задайте, пожалуйста, вопрос."
        }
      }
    });
    $("#form_request").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValidSendAjax,
      rules: {
        author: {
          required: true,
          is_author: true
        },
        email: {
          required: true,
          is_email: true
        },
        text: {
          required: true
        },
        type: {
          required: true
        },
        title: {
          required: true
        },
        category_id: {
          required: true
        }
      },
      messages: {
        author: {
          required: "Ф.И.О. обязательно для заполнения."
        },
        email: {
          required: "Email обязателен для заполнения.",
          email: "Введите корректный Email."
        },
        text: {
          required: "Задайте, пожалуйста, вопрос."
        },
        title: {
          required: "Задайте тему."
        },
        category_id: {
          required: "Выберите категорию обращения."
        },
        type: {
          required: "Тип вопроса обязателен к заполнению."
        }
      }
    });
    return $("#form_registration").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValidSendAjax,
      rules: {
        individ: {
          required: true
        },
        inn: {
          required: true,
          maxlength: 12,
          is_number: true
        },
        kpp: {
          required: true,
          maxlength: 9,
          is_number: true
        },
        org_type: {
          required: true
        },
        org_name: {
          required: true
        },
        position: {
          required: true
        },
        email: {
          required: true,
          is_email: true
        },
        phone: {
          required: true,
          is_phone: true
        }
      },
      messages: {
        individ: {
          required: "Это поле обязательно для заполнения."
        },
        inn: {
          required: "Пожалуйста, укажите ИНН",
          maxlength: "Максимальное количество символов 12."
        },
        kpp: {
          required: "Пожалуйста, укажите КПП",
          maxlength: "Максимальное количество символов 9."
        },
        org_type: {
          required: "Пожалуйста, укажите правовую форму"
        },
        org_name: {
          required: "Имя компании обязательно для заполнения."
        },
        position: {
          required: "Пожалуйста, укажите должность"
        },
        email: {
          required: "Email обязателен для заполнения.",
          email: "Введите корректный Email."
        },
        phone: {
          required: "Телефон обязателен для заполнения."
        }
      }
    }, $(".blog-updates").validate({
      invalidHandler: handlerInvalid,
      submitHandler: handlerValidSubscribe,
      rules: {
        email: {
          required: true,
          is_email: true
        }
      },
      messages: {
        email: {
          required: "Введите Email."
        }
      }
    }));
  });

}).call(this);
